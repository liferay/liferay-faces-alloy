alloy-accordion=[javadoc:com.liferay.faces.alloy.component.Accordion] is a [javadoc:javax.faces.component.UIData] (iterator) component that renders child tabs either statically or dynamically.
alloy-accordion-data-model=Since it extends [javadoc:javax.faces.component.UIData], it can render tabs *dynamically* when the [vdldoc:alloy:accordion:value] attribute is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:alloy:accordion:var] attribute can be used to introduce a variable name into the EL when iterating over the model.
alloy-accordion-general=Tabs can be specified *statically* with [vdldoc:alloy:tab] child tags. Tab headers can be specified via the `header` facet or [vdldoc:alloy:tab:headerText] attribute and can be styled with CSS.
alloy-accordion-general-example-1=Specifying the `header` facet
alloy-accordion-general-example-2=Specifying the [vdldoc:alloy:tab:headerText] attribute
alloy-accordion-multiple=When [vdldoc:alloy:accordion:multiple]=`true`, multiple tabs can be expanded. <br /><br />*JavaScript API:*<ul><li>`collapseAll()` causes all of the accordion tabs to close</li><li>`expandAll()` causes all of the accordion tabs to open</li></ul>
alloy-accordion-selected-tab=The [vdldoc:alloy:accordion:selectedIndex] attribute is a zero-based integer representing the selected tab. The *client-side state* of the tab is preserved when a form is submitted.
alloy-accordion-server-events=Specifying the [vdldoc:f:ajax] child tag with [vdldoc:f:ajax:event]=`tabCollapse` or `tabExpand` will broadcast the server-side [javadoc:com.liferay.faces.alloy.component.tab.TabCollapseEvent] or [javadoc:com.liferay.faces.alloy.component.tab.TabExpandEvent] respectively. Listening to the event is accomplished by specifying a backing-bean method via the `f:ajax` [vdldoc:f:ajax:listener] attribute.
alloy-audio=[javadoc:com.liferay.faces.alloy.component.Audio] is a [javadoc:javax.faces.component.UIComponent] component that renders a `&lt;div&gt;` that contains an HTML5 `&lt;audio&gt;` element. It also supports graceful degradation for older browsers.
alloy-audio-general=The general usage of the component is to set the [vdldoc:alloy:audio:value] attribute to a [javadoc:java.lang.String] audio URL. Degradation to a Flash player can be enabled via the [vdldoc:alloy:audio:degrade] attribute (defaults to true). 
alloy-audio-general-example-1=Context-relative path to a resource via the [vdldoc:alloy:audio:value] attribute
alloy-audio-general-example-2=JSF resource via the `#{resource}` EL keyword
alloy-audio-general-example-3=JSF resource via the Alloy [javadoc:com.liferay.faces.alloy.component.resource.Resource] component
alloy-audio-general-example-4=JSF resource via the [vdldoc:alloy:audio:library] and [vdldoc:alloy:audio:name] attributes
alloy-audio-graceful-degradation=The component supports graceful degradation for older browsers using the <a href="http://get.adobe.com/flashplayer/" target="_blank">Adobe&reg; Flash&reg; Player</a> bundled with AlloyUI. If no value is specified in the `&lt;alloy:audio&gt;` tag, then the audio from the first child `&lt;alloy:resource&gt;` tag is used.<br/><br/>A different player can be specified via the [vdldoc:alloy:video:flashPlayer] attribute. Additional  `&lt;param&gt;` tags can be inserted into the Adobe&reg; Flash&reg player's `&lt;object&gt;` tag by specifying an [vdldoc:f:facet] with `name="flash"`. <br/><br/><em>Adobe&reg; Flash&reg; is a registered trademark of Adobe Systems Incorporated.</em>
alloy-audio-graceful-degradation-example-1=Adobe&reg; Flash&reg; Player<br/>(Pre-HTML5 Browser Required)
alloy-audio-alternate-formats=The component supports supplying alternate audio formats to support different browsers.
alloy-audio-alternate-formats-example-1=Supplying alternate audio formats via [vdldoc:alloy:resource] child tags.
alloy-audio-alternate-formats-example-2=Supplying alternate audio formats via supplying a collection of Alloy [javadoc:com.liferay.faces.alloy.component.resource.Resource]s in the [vdldoc:alloy:audio:value] attribute.
alloy-audio-html5-passthrough=The component can be utilized as an HTML5 passthrough element. *(Requires JSF 2.2+)*
alloy-autocomplete=[javadoc:com.liferay.faces.alloy.component.autocomplete.AutoComplete] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input&gt;` element and a popup list. Suggestions (list items) can be added by specifying [vdldoc:f:selectItem] or [vdldoc:f:selectItems] tags as children. Since it extends [javadoc:javax.faces.component.html.HtmlInputText], it supports all the features of [vdldoc:h:inputText].
alloy-autocomplete-general=This component includes built-in *server-side* and *client-side* item filters which can be utilized in place of custom filtering.
alloy-autocomplete-general-example-1=Server-side filtering
alloy-autocomplete-general-example-2=Client-side filtering
alloy-autocomplete-custom-filter=The [vdldoc:alloy:autocomplete:serverCustomFilter] and [vdldoc:alloy:autocomplete:clientCustomFilter] attributes allow for custom filtering of items.
alloy-autocomplete-custom-filter-example-1=Server-side custom filtering method
alloy-autocomplete-custom-filter-example-2=Client-side custom filtering callback
alloy-autocomplete-data-model=Items can be specified *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
alloy-autocomplete-delay=Item filtering can be *delayed* via the [vdldoc:alloy:autoComplete:delay] attribute.
alloy-autocomplete-delay-example-1=300 millisecond delay after typing a character
alloy-autocomplete-validation=This component includes built-in validation via the [vdldoc:alloy:autoComplete:listItemRequired] attribute which validates whether the value is contained in the list of completion items. It also supports external validators such as [vdldoc:f:validateRegex].
alloy-autocomplete-validation-example-1=Specifying `listItemRequired="true"`
alloy-autocomplete-validation-example-2=Specifying an `f:validateRegex` with pattern `&#91a-zA-Z &#93&#42;`
alloy-autocomplete-instant-ajax=The component supports *instant Ajax* by adding an [vdldoc:f:ajax] child tag.
alloy-autocomplete-instant-ajax-example-1=Instant-Ajax when an item is selected
alloy-autocomplete-instant-ajax-example-2=Instant-Ajax when an item is selected or when the user enters a value
alloy-autocomplete-min-chars=The *minimum number of characters* required before filtering can be specified via the [vdldoc:alloy:autoComplete:minChars] attribute.
alloy-autocomplete-min-chars-example-1=Specifying `minChars="2"`
alloy-autocomplete-highlighter=The filtered items can be *highlighted* via the [vdldoc:alloy:autoComplete:highlighterType] attribute.
alloy-body=[javadoc:com.liferay.faces.alloy.component.body.Body] is a [javadoc:javax.faces.component.UIOutput] that renders a `&lt;body&gt;` element for webapps and a `&lt;div&gt;` for portlets.<br/><br/>Since it extends [javadoc:javax.faces.component.html.HtmlBody], it supports all the features of [vdldoc:h:body]. However, *the main benefit* of using [vdldoc:alloy:body] is that scripts specified by `&lt;alloy:outputScript target="body" /&gt;` as well as JavaScript closures rendered by Liferay Faces Alloy components are rendered as a single `&lt;script&gt;...&lt;/script&gt;` just before the closing `&lt;/body&gt;` tag.
alloy-body-general=The usage of [vdldoc:alloy:body] in webapps is the same as with portlets. However, the surrounding tag in a webapp is `&lt;html&gt;` whereas the surrounding tag in a portlet is [vdldoc:f:view].
alloy-button=[javadoc:com.liferay.faces.alloy.component.button.Button] is a [javadoc:javax.faces.component.UIOutput] component that renders a styleable HTML `&lt;button&gt;` element. The default [vdldoc:alloy:button:type] is `button`. Since it extends [javadoc:javax.faces.component.html.HtmlOutcomeTargetButton], it supports all the features of [vdldoc:h:button]. The component does *not need to be a child* of `h:form` since the [vdldoc:alloy:button:outcome] attribute is designed to navigate via HTTP GET.
alloy-button-general=*Children* such as [vdldoc:alloy:icon], [vdldoc:alloy:outputText], and [vdldoc:h:graphicImage] can be specified for styling purposes. Alternatively, the [vdldoc:alloy:button:image] and [vdldoc:alloy:button:value] attributes can be specified for styling purposes.
alloy-button-general-example-1=Styling via children
alloy-button-general-example-2=Styling via [vdldoc:alloy:button:image] attribute
alloy-button-general-example-3=Styling via [vdldoc:alloy:button:value] attribute
alloy-button-menu=There are different options for creating menus
alloy-button-menu-example-1=Creating menus via the [vdldoc:alloy:menu] tag
alloy-button-menu-example-2=Styling the button with [vdldoc:f:facet]
alloy-button-navigation=The component can be used to *navigate* between pages with the [vdldoc:alloy:button:outcome] attribute. Setting [vdldoc:alloy:button:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
alloy-button-param=URL *parameters* can be specified via [vdldoc:f:param] child tags. Setting [vdldoc:alloy:button:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
alloy-button-various-styles=The component can be *styled* with Bootstrap class names as described in the <a href="http://liferay.github.io/alloy-bootstrap/base-css.html#buttons" target="_blank">Alloy Base CSS</a> documentation.
alloy-buttonrow=[javadoc:com.liferay.faces.portal.component.buttonrow.ButtonRow] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;div&gt;` element for grouping purposes. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
alloy-buttonrow-general=Buttons are arranged in a row by specifying [vdldoc:alloy:button] child tags.
alloy-commandbutton=[javadoc:com.liferay.faces.alloy.component.commandbutton.CommandButton] is a [javadoc:javax.faces.component.UICommand] component that renders a styleable HTML `&lt;button&gt;` element. The default [vdldoc:alloy:commandButton:type] is `submit`. Since it extends [javadoc:javax.faces.component.html.HtmlCommandButton], it supports all the features of [vdldoc:h:commandButton]. The component *must be a child* of [vdldoc:h:form] in order to trigger the [vdldoc:alloy:commandButton:action] or [vdldoc:alloy:commandButton:actionListener]. In order to provide a *Rich Internet Application* (RIA) experience for the end-user, the following attributes are set by default:<ul><li>[vdldoc:alloy:commandButton:ajax]=`"true"`</li><li>[vdldoc:alloy:commandButton:execute]/[vdldoc:alloy:commandButton:process]=`"@all"`</li><li>[vdldoc:alloy:commandButton:render]/[vdldoc:alloy:commandButton:update]=`"@none"`</li></ul>
alloy-commandbutton-general=*Children* such as [vdldoc:alloy:icon], [vdldoc:alloy:outputText], and [vdldoc:h:graphicImage] can be specified for styling purposes. Alternatively, the [vdldoc:alloy:commandButton:image] and [vdldoc:alloy:commandButton:value] attributes can be specified for styling purposes.
alloy-commandbutton-general-example-1=Styling via children
alloy-commandbutton-general-example-2=Styling via [vdldoc:alloy:commandButton:image] attribute
alloy-commandbutton-general-example-3=Styling via [vdldoc:alloy:commandButton:value] attribute
alloy-commandbutton-immediate=When the [vdldoc:alloy:commandButton:immediate] attribute is `true`, the [vdldoc:alloy:commandButton:action] and [vdldoc:alloy:commandButton:actionListener] callbacks execute during the *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal INVOKE_APPLICATION phase.
alloy-commandbutton-menu=There are different options for creating menus
alloy-commandbutton-menu-example-1=Creating menus via the [vdldoc:alloy:menu] tag
alloy-commandbutton-menu-example-2=Styling the button with [vdldoc:f:facet]
alloy-commandbutton-navigation=The component can be used to *navigate* between pages with the [vdldoc:alloy:commandbutton:action] attribute. By specifying a `&lt;redirect&gt;` element in the `navigation-rule`, it will utilize the POST/REDIRECT/GET pattern.
alloy-commandbutton-param=URL *parameters* can be specified via the [vdldoc:alloy:commandbutton:action] attribute. By specifying a `faces-redirect=true` parameter in the action attribute, it will utilize the POST/REDIRECT/GET pattern.
alloy-commandbutton-value-attribute=Although the component&apos;s [vdldoc:alloy:commandButton:value] attribute is *read-only* (can&apos;t be changed via form submission), it can be used to determine that an item has been selected by the user.
alloy-commandbutton-various-styles=The component can be *styled* with Bootstrap class names as described in the <a href="http://liferay.github.io/alloy-bootstrap/base-css.html#buttons" target="_blank">Alloy Base CSS</a> documentation.
alloy-commandlink=[javadoc:com.liferay.faces.alloy.component.commandlink.CommandLink] is a [javadoc:javax.faces.component.UICommand] component that renders an `&lt;a&gt;` element. Since it extends [javadoc:javax.faces.component.html.HtmlCommandLink], it supports all the features of [vdldoc:h:commandLink]. The component *must be a child* of [vdldoc:h:form] in order to trigger the [vdldoc:alloy:commandLink:action] or [vdldoc:alloy:commandLink:actionListener]. In order to provide a *Rich Internet Application* (RIA) experience for the end-user, the following attributes are set by default:<ul><li>[vdldoc:alloy:commandLink:ajax]=`"true"`</li><li>[vdldoc:alloy:commandLink:execute]/[vdldoc:alloy:commandLink:process]=`"@all"`</li><li>[vdldoc:alloy:commandLink:render]/[vdldoc:alloy:commandLink:update]=`"@none"`</li></ul>
alloy-commandlink-general=*Children* such as [vdldoc:alloy:icon], [vdldoc:alloy:outputText], and [vdldoc:h:graphicImage] can be specified for visual purposes. Alternatively, the [vdldoc:alloy:commandLink:value] attribute can be specified.
alloy-commandlink-general-example-1=Styling via children
alloy-commandlink-general-example-2=Styling via [vdldoc:alloy:commandButton:value] attribute
alloy-commandlink-immediate=When the [vdldoc:alloy:commandLink:immediate] attribute is `true`, the [vdldoc:alloy:commandLink:action] and [vdldoc:alloy:commandLink:actionListener] callbacks execute during the *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal INVOKE_APPLICATION phase.
alloy-commandlink-navigation=The component can be used to *navigate* between pages with the [vdldoc:alloy:commandLink:action] attribute. By specifying a `&lt;redirect&gt;` element in the `navigation-rule`, it will utilize the POST/REDIRECT/GET pattern.
alloy-commandlink-param=URL *parameters* can be specified via the [vdldoc:alloy:commandLink:action] attribute. By specifying a `faces-redirect=true` parameter in the action attribute, it will utilize the POST/REDIRECT/GET pattern.
alloy-commandlink-value-attribute=Although the component&apos;s [vdldoc:alloy:commandLink:value] attribute is *read-only* (can&apos;t be changed via form submission), it can be used to determine that an item has been selected by the user.
alloy-datalist=[javadoc:com.liferay.faces.alloy.component.datalist.DataList] is a [javadoc:javax.faces.component.UIData] (iterator) component that renders `&lt;ul&gt;` (unordered), `&lt;ol&gt;` (ordered), or `&lt;dl&gt;` (description) lists.
alloy-datalist-data-model=Since it extends [javadoc:javax.faces.component.UIData], it can render list items *dynamically* when the [vdldoc:alloy:dataItem] content is set via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:alloy:dataList:var] attribute can be used to introduce a variable name into the EL when iterating over the model. When [vdldoc:alloy:dataList:type]=`description` an optional [vdldoc:f:facet] with [vdldoc:f:facet:name]=`description` can be used to render `&lt;dd&gt;` description tags.
alloy-datalist-general=The type of list is specified via the [vdldoc:alloy:dataList:type] attribute. List items are specified with child [vdldoc:alloy:dataItem] tags.
alloy-datalist-general-example-1=Specifying [vdldoc:alloy:dataList:type]=`unordered` (the default)
alloy-datalist-general-example-2=Specifying [vdldoc:alloy:dataList:type]=`ordered`
alloy-datalist-general-example-3=Specifying [vdldoc:alloy:dataList:type]=`description`
alloy-datalist-selection=You can use children in your [vdldoc:alloy:dataItem]s to create a selection list with actionListeners.
alloy-datatable=[javadoc:com.liferay.faces.alloy.component.datatable.DataTable] is a [javadoc:javax.faces.component.UIData] (iterator) component that renders a `table` element with tabular data and is designed to be used in conjunction with [vdldoc:alloy:column] child component tags. Since it extends [javadoc:javax.faces.component.html.HtmlDataTable], it supports all the features of [vdldoc:h:dataTable].
alloy-datatable-general=The [vdldoc:alloy:dataTable:value] attribute tag must be bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:alloy:dataTable:var] attribute is used to introduce a variable name into the EL when iterating over the model.
alloy-datatable-filter=The table rows contained in the [javadoc:javax.faces.model.DataModel] can be limited by *filter* criteria provided by the user.
alloy-datatable-lazy=The table rows contained in the [javadoc:javax.faces.model.DataModel] can be fetched in a *lazy* (on-demand) manner by having the [vdldoc:alloy:dataTable:value] attribute bound via EL to an instance of [javadoc:com.liferay.faces.util.model.OnDemandDataModel]. The rows are fetched on the server-side whenever the user clicks on a pagination control, selects a sort column, or enters a filter.
alloy-datatable-pagination=The table rows contained in the [javadoc:javax.faces.model.DataModel] can be paginated with [vdldoc:alloy:paginator] and the number of rows per-page is controlled by the value of the [vdldoc:alloy:dataTable:rows] attribute.
alloy-datatable-selection=<p>Setting [vdldoc:alloy:dataTable:selectionMode]=`checkbox` will render a *check* in the first column of each row which enables *selection of multiple rows*.</p><p>Setting [vdldoc:alloy:dataTable:selectionMode]=`radio` will render a *radio button* in the first column of each row which enables *selection of a single row*. The user can hold down the &#8984; or &#10070; (meta) key in order to *deselect* the currently selected row.</p><p>The *selected row indexes* can be determined in a backing bean by calling [javadoc:com.liferay.faces.alloy.component.datatable.DataTable]'s `getSelectedRowIndexes()` method.</p>
alloy-datatable-server-events=<p>Specifying the [vdldoc:f:ajax] child tag with [vdldoc:f:ajax:event]=`rowSelect` or `rowDeselect` will broadcast the server-side [javadoc:com.liferay.faces.alloy.component.datatable.RowSelectEvent] or [javadoc:com.liferay.faces.alloy.component.datatable.RowDeselectEvent] respectively. Listening to the event is accomplished by specifying a backing-bean method via the `f:ajax` [vdldoc:f:ajax:listener] attribute.</p><p>Specifying the [vdldoc:f:ajax] child tag with [vdldoc:f:ajax:event]=`rowSelectRange` or `rowDeselectRange` will broadcast the server-side [javadoc:com.liferay.faces.alloy.component.datatable.RowSelectRangeEvent] or [javadoc:com.liferay.faces.alloy.component.datatable.RowDeselectRangeEvent] respectively. Listening to the event is accomplished by specifying a backing-bean method via the `f:ajax` [vdldoc:f:ajax:listener] attribute.</p>
alloy-datatable-sort-single-column=<p>In order to enable sorting, the [vdldoc:alloy:dataTable:value] attribute of the DataTable must implement the [javadoc:com.liferay.faces.util.model.Sortable] interface (such as [javadoc:com.liferay.faces.util.model.OnDemandDataModel]). When the user clicks on a sortable column header, the `Sortable.setSortCriteria(List&lt;SortCriterion&gt;)` method is called on the DataTable's value. Columns can be made sortable by setting the [vdldoc:alloy:column:sortBy] attribute of a nested `alloy:column` component tag.</p>
alloy-datatable-sort-multiple-columns=<p>In order to enable sorting, the [vdldoc:alloy:dataTable:value] attribute of the DataTable must implement the [javadoc:com.liferay.faces.util.model.Sortable] interface (such as [javadoc:com.liferay.faces.util.model.OnDemandDataModel]). When the user clicks on a sortable column header, the `Sortable.setSortCriteria(List&lt;SortCriterion&gt;)` method is called on the DataTable's value. Columns can be made sortable by setting the [vdldoc:alloy:column:sortBy] attribute of a nested `alloy:column` component tag.</p><p>Setting [vdldoc:alloy:dataTable:multiColumnSort]=`true` enables the user to hold down the &#8984; or &#10070; (meta) key in order to select multiple columns (in a particular order) for sorting.</p>
alloy-dialog=[javadoc:com.liferay.faces.alloy.component.dialog.Dialog] is a [javadoc:javax.faces.component.UIPanel] component that that renders a `&lt;div&gt;` element that is initially styled with `display:none` so that it can be popped-up as an *overlay* by calling the JavaScript API. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
alloy-dialog-general=The dialog can be popped-up by specifying a [vdldoc:alloy:dialog:clientKey] and calling the `show()` JavaScript function. When [vdldoc:alloy:dialog:modal]=`true` the user will be forced to interact with or dismiss the dialog in order to return to the main application. When [vdldoc:alloy:dialog:dismissible]=`true` the dialog can be dismissed by clicking outside of it, unless it is [vdldoc:alloy:dialog:modal].<br /><br />*JavaScript API:*<ul><li>`show()` causes the dialog to be visible</li><li>`hide()` causes the dialog to be invisible</li><li>`toggle()` causes the dialog visibility to be toggled</li></ul>
alloy-dialog-general-example-1=Default usage with [vdldoc:alloy:dialog:dismissible]=`false`
alloy-dialog-general-example-2=Alternate usage with [vdldoc:alloy:dialog:dismissible]=`true`
alloy-dialog-general-example-3=Blocking usage with [vdldoc:alloy:dialog:modal]=`true`
alloy-field=[javadoc:com.liferay.faces.alloy.component.field.Field] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;div&gt;` element and a `&lt;label&gt;` element in order to wrap a field. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
alloy-field-benefits-description=since it has a [vdldoc:alloy:field:label] attribute and provides *color-coded styling* based on the results of validation. 
alloy-field-general=A *label* can be specified via the [vdldoc:alloy:field:label] attribute. In addition, the [vdldoc:alloy:field:id] attribute is typically referenced by the [vdldoc:f:ajax] tag in order to re-render an input field and a corresponding message.<br/><br/>If a *child* input component like [vdldoc:alloy:inputText] fails validation, then the [javadoc:javax.faces.application.FacesMessage] that is queued for the child input will use the [vdldoc:alloy:field:label] of the field. This provides the end-user with a better context as to which input field failed validation.
alloy-field-general-example-1=Re-Rendering [vdldoc:alloy:field] via [vdldoc:f:ajax].
alloy-field-message-styling=The component will automatically be *styled* according to the most severe message that exists within it.
alloy-field-message-styling-example-1=`FacesMessage.SEVERITY_INFO`
alloy-field-message-styling-example-2=`FacesMessage.SEVERITY_WARN`
alloy-field-message-styling-example-3=`FacesMessage.SEVERITY_ERROR`
alloy-fieldset=[javadoc:com.liferay.faces.alloy.component.fieldset.Fieldset] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;fieldset&gt;` element in order to group form elements.
alloy-fieldset-general=A *header* for the component can be specified via the [vdldoc:alloy:fieldset:legend] attribute.
alloy-form=[javadoc:com.liferay.faces.alloy.component.form.Form] is a [javadoc:javax.faces.component.UIForm] component that renders a `&lt;form&gt;` element. Since it extends [javadoc:javax.faces.component.html.HtmlForm], it supports all the features of [vdldoc:h:form].
alloy-form-general=When an [vdldoc:alloy:form] is submitted via [vdldoc:alloy:commandButton] or [vdldoc:alloy:commandLink] it is submitted via Ajax by default.
alloy-form-non-ajax=Forms can be submitted via non-Ajax (full-page) postback by specifying [vdldoc:alloy:commandButton:ajax]=`false` for [vdldoc:alloy:commandButton] or [vdldoc:alloy:commandLink].
alloy-form-view-params= View Parameters can be automatically included in full-page postbacks by setting [vdldoc:alloy:form:includeViewParams]=`true`.
alloy-head=[javadoc:com.liferay.faces.alloy.component.head.Head] is a [javadoc:javax.faces.component.UIOutput] that renders a `&lt;head&gt;` element for webapps, but not for portlets. *In the case of portlets,* the presence of [vdldoc:alloy:head] informs the JSF portlet bridge that JSF resources with `target="head"` should be included in the `&lt;head&gt;` element rendered by the portal.<br/><br/>Since it extends [javadoc:javax.faces.component.html.HtmlHead], it supports all the features of [vdldoc:h:head]. However, *the main benefit* of using [vdldoc:alloy:head] instead of [vdldoc:h:head] is that all of the Liferay Faces Alloy resources (such as alloy.js) are automatically included in the `&lt;head&gt;` element.
alloy-head-general=The usage of [vdldoc:alloy:head] in webapps is the same as with portlets. However, the surrounding tag in a webapp is `&lt;html&gt;` whereas the surrounding tag in a portlet is [vdldoc:f:view].
alloy-icon=[javadoc:com.liferay.faces.alloy.component.icon.Icon] is a [javadoc:javax.faces.component.UIComponent] that renders a span which contains an icon specified by the [vdldoc:alloy:icon:name] attribute.
alloy-icon-general=The component displays an *icon* specified by the [vdldoc:alloy:icon:name] attribute. Names are described in the <a href="http://liferay.github.io/alloy-bootstrap/base-css.html#icons" target="_blank">Alloy Base CSS</a> documentation.
alloy-image=[javadoc:com.liferay.faces.alloy.component.image.Image] is a [javadoc:javax.faces.component.UIGraphic] component that renders an `&lt;img&gt;` element. Since it extends [javadoc:javax.faces.component.html.HtmlGraphicImage], it supports all the features of [vdldoc:h:image].
alloy-image-general=The [vdldoc:alloy:image:value] attribute can be *bound to a model bean property* via EL, bound to a JSF resource via the `#{resource}` EL keyword, or using the [vdldoc:alloy:image:library] and [vdldoc:alloy:image:name] attributes to specify a JSF resource.
alloy-image-general-example-1=Context-relative path to a resource via the [vdldoc:alloy:image:value] attribute 
alloy-image-general-example-2=JSF resource via the `#{resource}` EL keyword
alloy-image-general-example-3=JSF resource via the [vdldoc:alloy:image:library] and [vdldoc:alloy:image:name] attributes
alloy-image-general-example-4=Clickable areas via the [vdldoc:alloy:image:usemap] attribute
alloy-loadconstants=[javadoc:com.liferay.faces.alloy.taghandler.LoadConstants] is a [javadoc:javax.faces.view.facelets.TagHandler] which can obtain constants from Java for use in EL.
alloy-loadconstants-general=Constants can be imported from `class`, `enum`, or `interface` types and are kept in a thread-safe, application-scoped cache unless [vdldoc:alloy:loadConstants:cacheable]=`false`.
alloy-loadconstants-general-example-1=Importing from a Java class
alloy-loadconstants-general-example-2=Importing from a Java enum
alloy-loadconstants-general-example-3=Importing from a Java interface
alloy-inputdate=[javadoc:com.liferay.faces.alloy.component.inputdate.InputDate] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input type="text"&gt;` element and a *calendar popover* with selectable dates. The component attempts to automatically convert the submitted value to a [javadoc:java.util.Date] via a built-in [javadoc:javax.faces.convert.DateTimeConverter].
alloy-inputdate-date-pattern=A *custom pattern* can be specified via the [vdldoc:alloy:inputDate:datePattern] attribute. The syntax of the date pattern follows the format specified by [javadoc:java.text.SimpleDateFormat].
alloy-inputdate-date-pattern-example=Specifying `datePattern="EEEE, MMM dd, yyyy"`
alloy-inputdate-general=The [vdldoc:alloy:inputDate:showOn] attribute specifies which events will popup the calendar. When [vdldoc:alloy:inputDate:nativeWhenMobile]=`true` (the default), then the component will render an HTML5 &lt;input type="date" /&gt; element on small/mobile displays in order to enable selection of a date with the mobile device's native UI.
alloy-inputdate-general-example-1=Specifying [vdldoc:alloy:inputDate:showOn]=`focus` (the default)
alloy-inputdate-general-example-2=Specifying [vdldoc:alloy:inputDate:showOn]=`button`
alloy-inputdate-general-example-3=Specifying [vdldoc:alloy:inputDate:showOn]=`both`
alloy-inputdate-instant-ajax=The component supports *instant Ajax* by adding an [vdldoc:f:ajax] child tag.
alloy-inputdate-localization=A *custom locale* can be specified via the [vdldoc:alloy:inputDate:locale] attribute.
alloy-inputdate-localization-example-1=Hard coded Brazilian Portuguese locale
alloy-inputdate-localization-example-2=Japanese [javadoc:java.util.Locale] obtained from a bean via EL
alloy-inputdate-min-max=*Minimum* and *maximum* dates can be specified via the [vdldoc:alloy:inputDate:minDate] and [vdldoc:alloy:inputDate:maxDate] attributes. The component performs server side validation to ensure that submitted values are within the specified range.
alloy-inputdate-min-max-example=Specifying `minDate=""` and `maxDate=""`
alloy-inputdate-multiple-panes=The number of month *panes* that are displayed can be specified via the [vdldoc:alloy:inputDate:panes] attribute (maximum of 3).
alloy-inputdate-validation=A custom validator can be specified via the [vdldoc:alloy:inputDate:validator] attribute.
alloy-inputfile=[javadoc:com.liferay.faces.alloy.component.inputfile.InputFile] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input&gt;` element with `type="file"`. Since it extends [javadoc:javax.faces.component.html.HtmlInputFile], it supports all the features of [vdldoc:h:inputFile] and also supports multi-file uploads, instant-Ajax, preview, upload progress, and validation.
alloy-inputfile-benefits-description=since it works in *portlet and webapp* environments and also supports preview, upload progress, and validation.
alloy-inputfile-general=By default, one file can be uploaded as a non-Ajax (full-page) postback. 
alloy-inputfile-instant-ajax=Files can be uploaded *instantly* via Ajax by setting [vdldoc:alloy:inputFile:auto]=`true` and by adding an [vdldoc:f:ajax] child tag. *Note:* this feature can only be used with JSF 2.2.
alloy-inputfile-multiple=Multi-file upload is supported by setting the HTML5 passthrough attribute [vdldoc:alloy:inputFile:multiple]=`multiple`. 
alloy-inputfile-preview=A client-side preview of selected filenames and sizes can be displayed by setting [vdldoc:alloy:inputFile:showPreview]=`true`. 
alloy-inputfile-progress=Upload progress is displayed by setting [vdldoc:alloy:inputFile:showProgress]=`true`. If [vdldoc:alloy:inputFile:appendNewFiles]=`true` then the selected files are appended to the preview table. Otherwise, the preview table is cleared when new files are selected. Files can be uploaded *instantly* via Ajax by setting auto=true and by adding an f:ajax child tag. One *potential drawback* of showing progress is that each file is uploaded in a separate XmlHttpRequest.
alloy-inputfile-validation=Validation is accomplished by adding an [vdldoc:alloy:validateFile] child tag. The [vdldoc:alloy:validateFile:contentTypes] attribute is a comma-delimited list of content types such as `application/pdf,image/png`. The [vdldoc:alloy:validateFile:maxFileSize] attribute is a [javadoc:java.lang.Long] integer that indicates the maximum number of bytes that can be uploaded for each file. 
alloy-inputfile-validation-example=Upload .pdf or .png files with max size of 600,000 bytes
alloy-inputhidden=[javadoc:com.liferay.faces.alloy.component.inputhiddenarea.InputHidden] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input&gt;` element with *type=*`hidden`. Since it extends [javadoc:javax.faces.component.html.HtmlInputHidden], it supports all the features of [vdldoc:h:inputHidden].
alloy-inputhidden-validation=The [vdldoc:alloy:inputHidden:value] attribute can be *validated* via the [vdldoc:alloy:inputHidden:validator] attribute or by specifying a [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:alloy:inputHidden:validatorMessage] attribute.
alloy-inputhidden-immediate=When the [vdldoc:alloy:inputHidden:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-inputhidden-conversion=The [vdldoc:alloy:inputHidden:value] attribute can be *converted* via the [vdldoc:alloy:inputHidden:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:alloy:inputHidden:converterMessage] attribute.
alloy-inputhidden-general=The [vdldoc:alloy:inputHidden:value] attribute can be *bound to a model bean property* via EL.
alloy-inputsecret=[javadoc:com.liferay.faces.alloy.component.inputsecretarea.InputSecret] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input&gt;` element with *type=*`password`. Since it extends [javadoc:javax.faces.component.html.HtmlInputSecret], it supports all the features of [vdldoc:h:inputSecret].
alloy-inputsecret-general=The [vdldoc:alloy:inputSecret:value] attribute can be *bound to a model bean property* via EL.
alloy-inputsecret-immediate=When the [vdldoc:alloy:inputSecret:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-inputsecret-redisplay=The [vdldoc:alloy:inputSecret:redisplay] attribute indicates whether or not the [vdldoc:alloy:inputSecret:value] attribute is rendered to the response. For example, if *redisplay* is `true` then the component would be rendered like the following:<br/><br/><code>&lt;input type="secret" value="myPlainTextPassword" /&gt;</code><br/><br/>Since this is a !potential security risk!, the *default value* of the *redisplay* attribute is `false`. However, this has the side-effect of the user having to re-enter a value when validation fails. In order to provide a better user experience, avoid using [vdldoc:f:ajax:render]=`@form` to update the DOM. 
alloy-inputsecret-redisplay-example-1=Specifying [vdldoc:alloy:inputSecret:redisplay]=`false` (the default, which is secure) and re-rendering only specific components in the DOM
alloy-inputsecret-redisplay-example-2=Specifying [vdldoc:alloy:inputSecret:redisplay]=`true` !(potential security risk)! and re-rendering the entire form in the DOM
alloy-inputsecret-validation=The [vdldoc:alloy:inputSecret:value] attribute can be *validated* via the [vdldoc:alloy:inputSecret:validator] attribute or by specifying a [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:alloy:inputSecret:validatorMessage] attribute.
alloy-inputsourcecode=[javadoc:com.liferay.faces.alloy.component.aceeditor.InputSourceCode] is a [javadoc:javax.faces.component.UIInput] component that renders a field for editing source code text.
alloy-inputsourcecode-default-value=A *default value* can specified using when the [vdldoc:alloy:inputSourceCode:value] attribute is bound via EL to a model bean property. In the example below, the default value of the `sourceText` property is set inside of the `InputSourceCodeModelBean.getSourceText()` method.
alloy-inputsourcecode-general=<p>The component supports *color-coded text* for various programming languages via the [vdldoc:alloy:inputSourceCode:mode] attribute.</p><p>The [vdldoc:alloy:inputSourceCode:maxLines] attribute controls the maximum number of lines that are to be displayed before a vertical scrollbar appears.</p>
alloy-inputtext=[javadoc:com.liferay.faces.alloy.component.inputtextarea.InputText] is a [javadoc:javax.faces.component.UIInput] component that renders a field for editing *single-line text*. Since it extends [javadoc:javax.faces.component.html.HtmlInputText], it supports all the features of [vdldoc:h:inputText].
alloy-inputtext-conversion=The [vdldoc:alloy:inputText:value] attribute can be *converted* via the [vdldoc:alloy:inputText:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:alloy:inputText:converterMessage] attribute.
alloy-inputtext-general=The [vdldoc:alloy:inputText:value] attribute can be *bound to a model bean property* via EL.
alloy-inputtext-immediate=When the [vdldoc:alloy:inputText:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-inputtext-validation=The [vdldoc:alloy:inputText:value] attribute can be *validated* via the [vdldoc:alloy:inputText:validator] attribute or by specifying an [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:alloy:inputText:validatorMessage] attribute.
alloy-inputtextarea=[javadoc:com.liferay.faces.alloy.component.inputtextarea.InputTextarea] is a [javadoc:javax.faces.component.UIInput] component that renders a field for editing *multi-line text*. Since it extends [javadoc:javax.faces.component.html.HtmlInputTextarea], it supports all the features of [vdldoc:h:inputTextarea].
alloy-inputtextarea-conversion=The [vdldoc:alloy:inputTextarea:value] attribute can be *converted* via the [vdldoc:alloy:inputTextarea:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:alloy:inputTextarea:converterMessage] attribute.
alloy-inputtextarea-general=The [vdldoc:alloy:inputTextarea:value] attribute can be *bound to a model bean property* via EL.
alloy-inputtextarea-immediate=When the [vdldoc:alloy:inputTextarea:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-inputtextarea-right-to-left=The component supports *Right-To-Left* language input by setting the [vdldoc:alloy:inputTextarea:dir] and [vdldoc:alloy:inputTextarea:lang] attributes.
alloy-inputtextarea-size=The *size* of the rendered textarea can be specified via the [vdldoc:alloy:inputTextarea:rows] and [vdldoc:alloy:inputTextarea:cols] attributes, or via CSS using the [vdldoc:alloy:inputTextarea:styleClass] or [vdldoc:alloy:inputTextarea:style] attributes.
alloy-inputtextarea-size-example-1=Setting the size via the [vdldoc:alloy:inputTextarea:rows] and [vdldoc:alloy:inputTextarea:cols] attributes
alloy-inputtextarea-size-example-2=Setting the size via the [vdldoc:alloy:inputTextarea:style] attribute
alloy-inputtextarea-validation=The [vdldoc:alloy:inputTextarea:value] attribute can be *validated* via the [vdldoc:alloy:inputTextarea:validator] attribute or by specifying an [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:alloy:inputTextarea:validatorMessage] attribute.
alloy-inputtime=[javadoc:com.liferay.faces.alloy.component.inputtime.InputTime] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input type="text"&gt;` element and a *list popover* with selectable times. The component attempts to automatically convert the submitted value to a [javadoc:java.util.Date] via a built-in [javadoc:javax.faces.convert.DateTimeConverter].
alloy-inputtime-filter=The list of times can be *filtered* according to user input via the [vdldoc:alloy:inputTime:filterType] attribute.
alloy-inputtime-filter-example=Specifying `filterType="phraseMatch"`
alloy-inputtime-general=The [vdldoc:alloy:inputDate:showOn] attribute specifies which events will popup the list of selectable times. When [vdldoc:alloy:inputTime:nativeWhenMobile]=`true` (the default), then the component will render an HTML5 &lt;input type="time" /&gt; element on small/mobile displays in order to enable selection of a time with the mobile device's native UI.
alloy-inputtime-general-example-1=Specifying [vdldoc:alloy:inputTime:showOn]=`focus` (the default)
alloy-inputtime-general-example-2=Specifying [vdldoc:alloy:inputTime:showOn]=`button`
alloy-inputtime-general-example-3=Specifying [vdldoc:alloy:inputTime:showOn]=`both`
alloy-inputtime-highlighter=Times can be *highlighted* according to user input via the [vdldoc:alloy:inputTime:highlighterType] attribute.
alloy-inputtime-highlighter-example=Specifying `highlighterType="phraseMatch"`
alloy-inputtime-instant-ajax=The component supports *instant Ajax* by adding an [vdldoc:f:ajax] child tag.
alloy-inputtime-localization=A *custom locale* can be specified via the [vdldoc:alloy:inputTime:locale] attribute.
alloy-inputtime-localization-example-1=Hard coded Brazilian Portuguese locale 
alloy-inputtime-localization-example-2=Japanese [javadoc:java.util.Locale] obtained from a bean via EL
alloy-inputtime-min-max=*Minimum* and *maximum* times can be specified via the [vdldoc:alloy:inputTime:minTime] and [vdldoc:alloy:inputTime:maxTime] attributes according to the pattern `HH:mm:ss`.
alloy-inputtime-time-pattern=A *custom pattern* can be specified via the [vdldoc:alloy:inputTime:timePattern] attribute. The syntax of the time pattern follows the format specified by [javadoc:java.text.SimpleDateFormat].
alloy-inputtime-time-pattern-example=Specifying `timePattern="hh:mm:ss a"`
alloy-inputtime-step=The number of *seconds* between each selectable time can be specified via the [vdldoc:alloy:inputTime:step] attribute.
alloy-inputtime-validation=A custom validator can be specified via the [vdldoc:alloy:inputTime:validator] attribute.
alloy-link=[javadoc:com.liferay.faces.alloy.component.link.Link] is a [javadoc:javax.faces.component.UIOutcomeTarget] component that renders an `&lt;a&gt;` element (hyperlink). Since it extends [javadoc:javax.faces.component.html.HtmlLink], it supports all the features of [vdldoc:h:link].
alloy-link-benefits-description=is intended to be used to render a hyperlink that *navigates* to other JSF views via HTTP GET, or perhaps to re-render the same view with different *view parameters* via [vdldoc:f:param] child tags.
alloy-link-general=The text/content of the hyperlink can be specified via the [vdldoc:alloy:link:value] of the component or by specifying child components. Setting [vdldoc:alloy:link:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
alloy-link-general-example-1=Specifying hyperlink text via the [vdldoc:alloy:link:value] attribute
alloy-link-general-example-2=Specifying children as hyperlink text/content
alloy-link-navigation=The component can be used to *navigate* between pages with the [vdldoc:alloy:link:outcome] attribute.  Setting [vdldoc:alloy:link:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
alloy-link-param=URL *parameters* can be specified via [vdldoc:f:param] child tags. Setting [vdldoc:alloy:link:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
alloy-message=[javadoc:com.liferay.faces.alloy.component.message.Message] is a [javadoc:javax.faces.component.UIMessage] component that renders a `&lt;span&gt;` element containing the text of a single [javadoc:javax.faces.application.FacesMessage] for an associated component. Since it extends [javadoc:javax.faces.component.html.HtmlMessage], it supports all the features of [vdldoc:h:message].
alloy-message-general=The component can be *associated* with an input component like [vdldoc:alloy:inputText] via the [vdldoc:alloy:message:for] attribute. If it is a child of [vdldoc:alloy:field] then it will be *automatically styled* when validation fails.
alloy-message-general-example-1=Re-Rendering [vdldoc:alloy:message] via [vdldoc:f:ajax]
alloy-messages=[javadoc:com.liferay.faces.alloy.component.message.Messages] is a [javadoc:javax.faces.component.UIMessages] component that renders the text of one or more [javadoc:javax.faces.application.FacesMessage] instances inside a `&lt;ul&gt;` element or `&lt;table&gt;` element for an associated component, according to the [vdldoc:alloy:messages:layout] attribute. Since it extends [javadoc:javax.faces.component.html.HtmlMessage], it supports all the features of [vdldoc:h:message].
alloy-messages-general=The component is typically placed inside an [vdldoc:alloy:form] in order to render messages within the context of a form.
alloy-messages-general-example-1=Render *all* messages in a `&lt;ul&gt;` (the default)
alloy-messages-general-example-2=Render *all* messages in a `&lt;table&gt;`
alloy-messages-general-example-3=Render *only global* messages in a `&lt;ul&gt;`
alloy-outputformat=[javadoc:com.liferay.faces.alloy.component.outputformat.OutputFormat] is a [javadoc:javax.faces.component.UIOutput] component that renders *parameterized* text. Since it extends [javadoc:javax.faces.component.html.HtmlOutputFormat], it supports all the features of [vdldoc:h:outputFormat].
alloy-outputformat-general=The [vdldoc:alloy:outputFormat:value] attribute can contain *parameterized text* in the same manner as [javadoc:java.text.MessageFormat] and parameter substitution is accomplished via [vdldoc:f:param] child tags.
alloy-outputlabel=[javadoc:com.liferay.faces.alloy.component.outputlabel.OutputLabel] is a [javadoc:javax.faces.component.UIOutput] component that renders its [vdldoc:alloy:outputLabel:value] attribute within a `&lt;label&gt;` element. Since it extends [javadoc:javax.faces.component.html.HtmlOutputLabel], it supports all the features of [vdldoc:h:outputLabel].
alloy-outputlabel-general=The [vdldoc:alloy:outputLabel:value] attribute can be *bound to a message-bundle property* via EL in order to render internationalized labels.<br/><br/>If the component is *associated* with an input component like [vdldoc:alloy:inputText] via the [vdldoc:alloy:outputLabel:for] attribute, then a validation [javadoc:javax.faces.application.FacesMessage] that is queued for the associated component will use the [vdldoc:alloy:outputLabel:value] of the label. This provides the end-user with a better context as to which input field failed validation.
alloy-outputlink=[javadoc:com.liferay.faces.alloy.component.outputlink.OutputLink] is a [javadoc:javax.faces.component.UIOutput] component that renders an `&lt;a&gt;` element (hyperlink). Since it extends [javadoc:javax.faces.component.html.HtmlOutputLink], it supports all the features of [vdldoc:h:outputLink].
alloy-outputlink-benefits-description=is intended to be used to render a simple `&lt;a href="..."&gt;hyperlink&lt;/a&gt;` that requests a URL via HTTP GET.
alloy-outputlink-general=The [vdldoc:alloy:outputLink:value] of the component is rendered as the `href` attribute and the children of the component are rendered as the text/content of the hyperlink.
alloy-outputlink-general-example-1=Specifying text for the hyperlink
alloy-outputlink-general-example-2=Specifying an image for the hyperlink
alloy-outputlink-general-example-3=Specifying URL parameters with [vdldoc:f:param]
alloy-outputlink-conversion=The [vdldoc:alloy:outputLink:value] attribute can be *converted* via the [vdldoc:alloy:outputLink:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:alloy:outputLink:converterMessage] attribute.
alloy-outputremainingchars=[javadoc:com.liferay.faces.alloy.component.outputremainingchars.OutputRemainingChars] is a [javadoc:javax.faces.component.UIOutput] component that displays the number of characters remaining for an associated [vdldoc:alloy:inputText] or [vdldoc:alloy:inputTextarea].
alloy-outputremainingchars-general=The [vdldoc:alloy:outputRemainingChars:value] attribute can contain text with a `{0}` token that is substituted with the number of remaining characters. If the `value` attribute is not specified, then only the number of remaining characters are rendered.
alloy-outputremainingchars-general-example-1=Associate with an [vdldoc:alloy:inputText] and specify a `{0}` token within the [vdldoc:alloy:outputRemainingChars:value] attribute.
alloy-outputremainingchars-general-example-2=Associate with an [vdldoc:alloy:inputTextarea] and simply render the number of remaining characters.
alloy-outputremainingchars-default-value=When a *default value* of an associated [vdldoc:alloy:inputText] or [vdldoc:alloy:inputTextarea] is specified, the number of remaining characters will be calculated before rendering.
alloy-outputremainingchars-max-length-events=There are two attributes to use for events:
alloy-outputremainingchars-max-length-reached-1=The [vdldoc:alloy:outputRemainingChars:onMaxlengthReached] event occurs *every time* maxlength is reached.
alloy-outputremainingchars-max-length-reached-2=The [vdldoc:alloy:outputRemainingChars:onceMaxlengthReached] event occurs *the first time* maxlength is reached.
alloy-outputscript=[javadoc:com.liferay.faces.alloy.component.outputlink.OutputScript] is a [javadoc:javax.faces.component.UIOutput] component that renders a `&lt;script&gt;` element with `type="text/javascript"`. It supports all the features of [vdldoc:h:outputScript] and adds the [vdldoc:alloy:outputScript:use] attribute which provides the ability to specify AlloyUI or YUI modules as dependencies.
alloy-outputscript-general=The script can be rendered in different *positions* on the page via the [vdldoc:alloy:outputScript:target] attribute. Valid values include <code>body</code>, <code>form</code>, and <code>head</code>. The default value of this attribute is an empty (null) value which causes the <code>&lt;script&gt;</code> to be rendered inline (corresponding to its position in the view). Specifying <code>body</code> for the target attribute will cause the <code>&lt;script&gt;</code> to be rendered as close to the closing body tag as possible.
alloy-outputscript-general-example-1=Script rendered inline
alloy-outputscript-general-example-2=Script rendered at the bottom of the page
alloy-outputscript-general-script-1=This `&lt;script&gt;` is rendered inline because the [vdldoc:alloy:outputScript:target] attribute is not specified. The drawback of inline scripts is that they block rendering of the rest of the page.
alloy-outputscript-general-script-2=This `&lt;script&gt;` is rendered immediately before the closing `&lt;/body&gt;` tag because [vdldoc:alloy:outputScript:target]=`body`. The benefit of rendering scripts before the closing `&lt;/body&gt;` tag is that they do not block rendering of the rest of the page.
alloy-outputscript-resource=A JavaScript resource can be added to the page by specifying the [vdldoc:alloy:outputScript:library] and [vdldoc:alloy:outputScript:name] attributes.
alloy-outputscript-modules=AlloyUI or YUI *modules* can be specified via the [vdldoc:alloy:outputScript:use] attribute.
alloy-outputscript-modules-example-1=Event module
alloy-outputscript-modules-example-2=Node module
alloy-outputscript-modules-script-1=This example uses the `event` module in order to run the `&lt;script&gt;` once the `domready` event occurs. The `domready` event occurs *after* the page is rendered, so scripts which run on `domready` do not block rendering of the rest of the page.
alloy-outputscript-modules-script-2=This example uses the `node` module in order to attach a callback to the `click` event of the `&lt;button&gt;`.
alloy-outputstylesheet=[javadoc:com.liferay.faces.alloy.component.outputlink.OutputStylesheet] is a [javadoc:javax.faces.component.UIOutput] component that renders a `&lt;style&gt;` element.
alloy-outputstylesheet-general=CSS classes can be specified *inline* or included from external *resource* files.
alloy-outputstylesheet-general-example-1=Specifying a CSS class inline
alloy-outputstylesheet-general-example-2=Specifying a CSS class from a JSF resource
alloy-outputtext=[javadoc:com.liferay.faces.alloy.component.outputtext.OutputText] is a [javadoc:javax.faces.component.UIOutput] component that renders its own value as text. Since it extends [javadoc:javax.faces.component.html.HtmlOutputText], it supports all the features of [vdldoc:h:outputText].
alloy-outputtext-general=The [vdldoc:alloy:outputText:value] attribute can be *bound* to a model bean property via EL.
alloy-outputtext-conversion=The [vdldoc:alloy:outputText:value] attribute can be *converted* by specifying an [vdldoc:f:converter] type of child tag.
alloy-outputtext-right-to-left=The component supports *Right-To-Left* language input by setting the [vdldoc:alloy:outputText:dir] and [vdldoc:alloy:outputText:lang] attributes.
alloy-outputtooltip=[javadoc:com.liferay.faces.alloy.component.outputtooltip.OutputTooltip] is a [javadoc:javax.faces.component.UIOutput] component that renders a `&lt;div&gt;` element which is displayed as an *overlay* that is initially styled with `display:none` so that it can be displayed as an *overlay*. Since it extends [javadoc:javax.faces.component.html.HtmlOutputText], it supports all the features of [vdldoc:h:outputText].
alloy-outputtooltip-general=The component *must be associated* with another component (such as [vdldoc:alloy:button], [vdldoc:alloy:inputText], or [vdldoc:alloy:outputText]) via the [vdldoc:alloy:outputTooltip:for] attribute, so that the tooltip can be displayed nearby. The text of the tooltip can be specified via the [vdldoc:alloy:outputTooltip:value] attribute or by relying on the `title` attribute of the associated component. It can be styled by setting the [vdldoc:alloy:outputTooltip:styleClass] attribute to `tooltip`.
alloy-outputtooltip-general-example-1=Specifying tooltip text via the [vdldoc:alloy:outputTooltip:value] attribute
alloy-outputtooltip-general-example-2=Specifying tooltip text via the associated component's `title` attribute
alloy-outputtooltip-general-example-3=Specifying children, [vdldoc:alloy:outputTooltip:headerText], [vdldoc:alloy:outputTooltip:opacity]=`0.5` and [vdldoc:alloy:outputTooltip:position]=`bottom`
alloy-panel=[javadoc:com.liferay.faces.alloy.component.panel.Panel] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;div&gt;` element with *three* child `&lt;div&gt;` elements (one for header, body, and footer). Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
alloy-panel-general=The component is generally used to specify a *header* and/or *footer* in order to decorate child content.
alloy-panel-general-example-1=Specifying the `header` and `footer` facets
alloy-panel-general-example-2=Specifying the [vdldoc:alloy:panel:headerText] and [vdldoc:alloy:panel:footerText] attributes
alloy-panelgrid=[javadoc:com.liferay.faces.alloy.component.panelgrid.PanelGrid] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;table&gt;` element to layout its children in a tabular grid. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGrid], it supports all the features of [vdldoc:h:panelGrid].
alloy-panelgrid-general=The [vdldoc:alloy:panelGrid:columns] attribute specifies how many table columns are rendered. A new table row will be rendered if the number of children exceeds the number of columns.
alloy-panelgroup=[javadoc:com.liferay.faces.alloy.component.panelgroup.PanelGroup] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;span&gt;` or a `&lt;div&gt;` element for grouping purposes. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
alloy-panelgroup-general=The [vdldoc:alloy:panelGroup:layout] attribute specifies whether the component renders a `span` or a `div`.
alloy-panelgroup-general-example-1=By default, the component renders a `span`.
alloy-panelgroup-general-example-2=Specifying `block` for the [vdldoc:alloy:panelGroup:layout] attribute causes the component to render a `div`.
alloy-popover=[javadoc:com.liferay.faces.alloy.component.popover.Popover] is a [javadoc:javax.faces.component.UIPanel] component that that renders a `&lt;div&gt;` element that is initially styled with `display:none` so that it can be popped-up as an *overlay* by calling the JavaScript API. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
alloy-popover-general=The component *must be associated* with another component (such as [vdldoc:alloy:button]) via the [vdldoc:alloy:popover:for] attribute, so that the popover can be displayed nearby. When [vdldoc:alloy:popover:dismissible]=`true` the popover can be dismissed by clicking outside of it.<br /><br />*JavaScript API:*<ul><li>`show()` causes the popover to be visible</li><li>`hide()` causes the popover to be invisible</li><li>`toggle()` causes the popover visibility to be toggled</li></ul>
alloy-popover-general-example-1=Default usage with [vdldoc:alloy:popover:dismissible]=`true`
alloy-popover-general-example-2=Alternate usage with [vdldoc:alloy:popover:dismissible]=`false`
alloy-progressbar=[javadoc:com.liferay.faces.alloy.component.progressbar.ProgressBar] is a [javadoc:javax.faces.component.UIComponent] that displays a progress bar and can operate as a *server-side* or *client-side* progress indicator.
alloy-progressbar-general=The component can display *server-side* progress by nesting an [vdldoc:f:ajax] child tag. When [vdldoc:f:ajax:event]=`"poll"` (the default), the component will *poll the server for progress* by checking the [vdldoc:alloy:progressBar:value] attribute on the server and updating the client-side widget. The [vdldoc:alloy:progressBar:pollingDelay] attribute can be used to specify the *delay* (in milliseconds) before dispatching a polling Ajax request after receiving the response of a previous request.<br /><br />*JavaScript API:*<ul><li>`start()` causes the progress bar to start polling the server.</li><li>`stop()` causes the progress bar to stop polling the server.</li></ul>
alloy-progressbar-client-side=The component can display *client-side* progress by utilizing the `set` JavaScript function.
alloy-progressbar-server-events=Specifying the [vdldoc:f:ajax] child tag with [vdldoc:f:ajax:event]=`"progressComplete"` will broadcast the server-side [javadoc:com.liferay.faces.alloy.component.progressbar.completeEvent]. Listening to the event is accomplished by specifying a backing-bean method via the `f:ajax` [vdldoc:f:ajax:listener] attribute. The [vdldoc:alloy:progressBar:pollingDelay] attribute can be used to specify the *delay* (in milliseconds) before dispatching a polling Ajax request after recieving the response of a previous request.
alloy-progressbar-vertical=The component can be displayed vertically by specifying [vdldoc:alloy:progresBar:layout]=`"pageDirection"`.
alloy-row=[javadoc:com.liferay.faces.alloy.component.row.Row] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;div&gt;` and is designed to be used in conjunction with [vdldoc:alloy:column] child component tags.
alloy-row-general=The component takes [vdldoc:alloy:column] tags as children in order to layout components in a tabular grid.
alloy-row-column-width=The *width* of an [vdldoc:alloy:column] can be specified via the [vdldoc:alloy:column:width] attribute.
alloy-row-column-offset=The *offset width* of an [vdldoc:alloy:column] can be specified via the [vdldoc:alloy:column:offsetWidth] attribute.
alloy-selectbooleancheckbox=[javadoc:com.liferay.faces.alloy.component.selectbooleancheckbox.SelectBooleanCheckbox] is a [javadoc:javax.faces.component.UISelectBoolean] component that renders a checkbox. Since it extends [javadoc:javax.faces.component.html.HtmlSelectBooleanCheckbox], it supports all the features of [vdldoc:h:selectBooleanCheckbox].
alloy-selectbooleancheckbox-general=The [vdldoc:alloy:selectBooleanCheckbox:value] of the component *must* be of type `boolean` or [javadoc:java.lang.Boolean].
alloy-selectbooleancheckbox-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
alloy-selectbooleancheckbox-immediate=When the [vdldoc:alloy:selectBooleanCheckbox:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-selectmanycheckbox=[javadoc:com.liferay.faces.alloy.component.selectmanycheckbox.SelectManyCheckbox] is a [javadoc:javax.faces.component.UISelectMany] component that renders checkboxes and enables the user to select multiple values. Since it extends [javadoc:javax.faces.component.html.HtmlSelectManyCheckbox], it supports all the features of [vdldoc:h:selectManyCheckbox] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
alloy-selectmanycheckbox-conversion=The [vdldoc:alloy:selectManyCheckbox:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
alloy-selectmanycheckbox-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
alloy-selectmanycheckbox-default-value=A *default value* can specified using when the [vdldoc:alloy:selectManyCheckbox:value] attribute is bound via EL to a model bean property.
alloy-selectmanycheckbox-general=The [vdldoc:alloy:selectManyCheckbox:value] attribute can be *bound* to a model bean property via EL.
alloy-selectmanycheckbox-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
alloy-selectmanycheckbox-vertical-layout=Setting the value of the [vdldoc:alloy:selectManyCheckbox:layout] attribute to `pageDirection` will cause the component to render with a *vertical layout*.
alloy-selectmanycheckbox-immediate=When the [vdldoc:alloy:selectManyCheckbox:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-selectmanylistbox=[javadoc:com.liferay.faces.alloy.component.selectmanylistbox.SelectManyListbox] is a [javadoc:javax.faces.component.UISelectMany] component that renders a `select` element and enables the user to select multiple values. Since it extends [javadoc:javax.faces.component.html.HtmlSelectManyListbox], it supports all the features of [vdldoc:h:selectManyListbox] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
alloy-selectmanylistbox-conversion=The [vdldoc:alloy:selectManyListbox:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
alloy-selectmanylistbox-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
alloy-selectmanylistbox-default-value=A *default value* can specified using when the [vdldoc:alloy:selectManyListbox:value] attribute is bound via EL to a model bean property.
alloy-selectmanylistbox-general=The [vdldoc:alloy:selectManyListbox:value] attribute can be *bound* to a model bean property via EL, and the [vdldoc:alloy:selectManyListbox:size] can be specified.
alloy-selectmanylistbox-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
alloy-selectmanylistbox-immediate=When the [vdldoc:alloy:selectManyListbox:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-selectmanymenu=[javadoc:com.liferay.faces.alloy.component.selectmanymenu.SelectManyMenu] is a [javadoc:javax.faces.component.UISelectMany] component that renders a `select` element and enables the user to select multiple values. *It has the same basic features of* [vdldoc:alloy:selectManyListbox] *except that there is no `size` attribute because JSF "select&#42;menu" components always render `size=1`*. Since it extends [javadoc:javax.faces.component.html.HtmlSelectManyMenu], it supports all the features of [vdldoc:h:selectManyMenu] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
alloy-selectmanymenu-conversion=The [vdldoc:alloy:selectManyMenu:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
alloy-selectmanymenu-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
alloy-selectmanymenu-default-value=A *default value* can specified using when the [vdldoc:alloy:selectManyMenu:value] attribute is bound via EL to a model bean property.
alloy-selectmanymenu-general=The [vdldoc:alloy:selectManyMenu:value] attribute can be *bound* to a model bean property via EL.
alloy-selectmanymenu-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
alloy-selectmanymenu-immediate=When the [vdldoc:alloy:selectManyMenu:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-selectonelistbox=[javadoc:com.liferay.faces.alloy.component.selectonelistbox.SelectOneListbox] is a [javadoc:javax.faces.component.UISelectOne] component that renders a `select` element (multi-item list) and enables the user to select one value. Since it extends [javadoc:javax.faces.component.html.HtmlSelectOneListbox], it supports all the features of [vdldoc:h:selectOneListbox] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
alloy-selectonelistbox-conversion=The [vdldoc:alloy:selectOneListbox:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
alloy-selectonelistbox-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
alloy-selectonelistbox-default-value=A *default value* can specified using when the [vdldoc:alloy:selectOneListbox:value] attribute is bound via EL to a model bean property.
alloy-selectonelistbox-general=The [vdldoc:alloy:selectOneListbox:value] attribute can be *bound* to a model bean property via EL, and the [vdldoc:alloy:selectOneListbox:size] can be specified.
alloy-selectonelistbox-instant-ajax=The [vdldoc:alloy:selectOneListbox:value] attribute can be *bound* to a model bean property via EL.
alloy-selectonelistbox-immediate=The [vdldoc:alloy:selectOneListbox:value] attribute can be *bound* to a model bean property via EL.
alloy-selectonemenu=[javadoc:com.liferay.faces.alloy.component.selectonemenu.SelectOneMenu] is a [javadoc:javax.faces.component.UISelectOne] component that renders a `select` element (drop down list) and enables the user to select one value. Since it extends [javadoc:javax.faces.component.html.HtmlSelectOneMenu], it supports all the features of [vdldoc:h:selectOneMenu] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
alloy-selectonemenu-conversion=The [vdldoc:alloy:selectOneMenu:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
alloy-selectonemenu-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
alloy-selectonemenu-default-value=A *default value* can specified using when the [vdldoc:alloy:selectOneMenu:value] attribute is bound via EL to a model bean property.
alloy-selectonemenu-general=The [vdldoc:alloy:selectOneMenu:value] attribute can be *bound* to a model bean property via EL.
alloy-selectonemenu-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
alloy-selectonemenu-immediate=When the [vdldoc:alloy:selectOneMenu:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-selectoneradio=[javadoc:com.liferay.faces.alloy.component.selectoneradio.SelectOneRadio] is a [javadoc:javax.faces.component.UISelectOne] component that renders radio buttons. Since it extends [javadoc:javax.faces.component.html.HtmlSelectOneRadio], it supports all the features of [vdldoc:h:selectOneRadio] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
alloy-selectoneradio-conversion=The [vdldoc:alloy:selectOneRadio:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
alloy-selectoneradio-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
alloy-selectoneradio-default-value=A *default value* can specified using when the [vdldoc:alloy:selectOneRadio:value] attribute is bound via EL to a model bean property.
alloy-selectoneradio-general=The [vdldoc:alloy:selectOneRadio:value] attribute can be *bound* to a model bean property via EL.
alloy-selectoneradio-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
alloy-selectoneradio-immediate=When the [vdldoc:alloy:selectOneRadio:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
alloy-selectoneradio-vertical-layout=Setting the value of the [vdldoc:alloy:selectOneRadio:layout] attribute to `pageDirection` will cause the component to render with a *vertical layout*.
alloy-selectstarrating=[javadoc:com.liferay.faces.alloy.component.selectstarrating.SelectStarRating] is a [javadoc:javax.faces.component.UISelectOne] component that renders a set of stars. The user can click on a star to select a rating and click on the same star a second time to de-select a rating. Since it extends [javadoc:javax.faces.component.html.HtmlSelectOneRadio], it accepts [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
alloy-selectstarrating-data-model=The component can display stars *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
alloy-selectstarrating-default-value=A *default value* can be specified using one of two ways:
alloy-selectstarrating-default-value-example-1=Initializing the default value in the model bean.
alloy-selectstarrating-default-value-example-2=Setting the [vdldoc:alloy:starRating:defaultSelected] attribute.
alloy-selectstarrating-general=There are two basic ways to *bind* the [vdldoc:alloy:starRating:value] attribute this component to a model bean property:
alloy-selectstarrating-general-example-1=String value (no converter required)
alloy-selectstarrating-general-example-2=Object value (requires a converter)
alloy-selectstarrating-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
alloy-selectthumbrating=[javadoc:com.liferay.faces.alloy.component.selectthumbrating.SelectThumbRating] is a [javadoc:javax.faces.component.UISelectOne] component that renders a pair of thumb icons that a user can select to indicate their favor. The user can click on a thumb to select their favor and click on the same thumb a second time to de-select their favor. Since it extends [javadoc:javax.faces.component.html.HtmlSelectOneRadio], it accepts [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as children.
alloy-selectthumbrating-general=The [vdldoc:alloy:thumbRating:value] of the component is typically of type [javadoc:java.lang.Boolean].
alloy-selectthumbrating-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
alloy-tabview=[javadoc:com.liferay.faces.alloy.component.TabView] is a [javadoc:javax.faces.component.UIData] (iterator) component that renders tabs either statically or dynamically.
alloy-tabview-general=Tabs can be specified *statically* with [vdldoc:alloy:tab] child tags.  Tab headers can be specified via the `header` facet or [vdldoc:alloy:tab:headerText] attribute and can be styled with CSS.
alloy-tabview-general-example-1=Specifying the `header` facet
alloy-tabview-general-example-2=Specifying the [vdldoc:alloy:tabView:headerText] attribute
alloy-tabview-data-model=Since it extends [javadoc:javax.faces.component.UIData], it can render tabs when the [vdldoc:alloy:tabView:value] attribute is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:alloy:tabView:var] attribute can be used to introduce a variable name into the EL when iterating over the model.
alloy-tabview-dynamic-tabs=Tabs can be rendered *dynamically* by setting the [vdldoc:alloy:tab:rendered] attribute of each [vdldoc:alloy:tab] child. 
alloy-tabview-selected-tab=The [vdldoc:alloy:tabView:selectedIndex] attribute is a zero-based integer representing the selected tab. The *client-side state* of the tab is preserved when a form is submitted.
alloy-tabview-server-events=Specifying the [vdldoc:f:ajax] child tag with [vdldoc:f:ajax:event]=`tabSelect` will broadcast the server-side [javadoc:com.liferay.faces.alloy.component.tab.TabSelectEvent]. Listening to the event is accomplished by specifying a backing-bean method via the `f:ajax` [vdldoc:f:ajax:listener] attribute.
alloy-tabview-wizard=The component can act like a step-by-step *wizard* by controlling the [vdldoc:alloy:tabView:selectedIndex] attribute of the [vdldoc:alloy:tabView] and the [vdldoc:alloy:tab:disabled] attribute of each [vdldoc:alloy:tab] child.
alloy-video=[javadoc:com.liferay.faces.alloy.component.Video is a [javadoc:javax.faces.component.UIComponent] that renders a `&lt;div&gt;` that contains an HTML5 `&lt;video&gt;` element.  It also supports graceful degradation for older browsers.
alloy-video-general=The general usage of the component is to set the [vdldoc:alloy:video:value] attribute to a [javadoc:java.lang.String] video URL. Degradation to a Flash player can be enabled via the [vdldoc:alloy:video:degrade] attribute (defaults to true).
alloy-video-general-example-1=Context-relative path to a resource via the [vdldoc:alloy:video:value] attribute
alloy-video-general-example-2=JSF resource via the `#{resource}` EL keyword
alloy-video-general-example-3=JSF resource via the Alloy [javadoc:com.liferay.faces.alloy.component.resource.Resource] component
alloy-video-general-example-4=JSF resource via the [vdldoc:alloy:video:library] and [vdldoc:alloy:video:name] attributes
alloy-video-graceful-degradation=The component supports graceful degradation for older browsers using the <a href="http://get.adobe.com/flashplayer/" target="_blank">Adobe&reg; Flash&reg; Player</a> bundled with AlloyUI. If no value is specified in the `&lt;alloy:video&gt;` tag, then the video from the first child `&lt;alloy:resource&gt;` tag is used.<br/><br/>A different player can be specified via the [vdldoc:alloy:video:flashPlayer] attribute. Additional  `&lt;param&gt;` tags can be inserted into the Adobe&reg; Flash&reg player's `&lt;object&gt;` tag by specifying an [vdldoc:f:facet] with `name="flash"`.<br/><br/><em>Adobe&reg; Flash&reg; is a registered trademark of Adobe Systems Incorporated.</em>
alloy-video-graceful-degradation-example-1=Adobe&reg; Flash&reg; Player<br/>(Pre-HTML5 Browser Required)
alloy-video-alternate-formats=The component supports supplying alternate videos to support different browsers.
alloy-video-alternate-formats-example-1=Supplying alternate videos via [vdldoc:alloy:resource] child tags.
alloy-video-alternate-formats-example-2=Supplying alternate videos via supplying a collection of Alloy [javadoc:com.liferay.faces.alloy.component.resource.Resource]s in the [vdldoc:alloy:video:value] attribute.
alloy-video-html5-passthrough=The component can be utilized as an HTML5 passthrough element. *(Requires JSF 2.2+)*
aui-script=[javadoc:com.liferay.faces.alloy.component.AUIScript] is a [javadoc:javax.faces.component.UIOutput] component that renders a `&lt;script&gt;` element with `type="text/javascript"`.
aui-script-general=The script can be rendered in different *positions* on the page via the [vdldoc:aui:script:position] attribute. Valid values include <code>auto</code>, <code>bottom</code>, and <code>inline</code>. The default value is <code>auto</code>.
aui-script-general-example-1=Script rendered inline
aui-script-general-example-2=Script rendered at the bottom of the page
aui-script-general-script-1=This `&lt;script&gt;` is rendered inline. The drawback of inline scripts is that they block rendering of the rest of the page.
aui-script-general-script-2=This `&lt;script&gt;` is rendered at the bottom of the page. The benefit of rendering scripts at the bottom is that they do not block rendering of the rest of the page.
aui-script-modules=AlloyUI or YUI *modules* can be specified via the [vdldoc:aui:script:use] attribute.
aui-script-modules-example-1=Event module
aui-script-modules-example-2=Node module
aui-script-modules-script-1=This example uses the `event` module in order to run the `&lt;script&gt;` once the `domready` event occurs. The `domready` event occurs *after* the page is rendered, so scripts which run on `domready` do not block rendering of the rest of the page.
aui-script-modules-script-2=This example uses the `node` module in order to attach a callback to the `click` event of the `&lt;button&gt;`.
note-tomcat-max-file-size=The default limit for the `com.liferay.faces.util.uploadedFileMaxSize` context-param is 104857600 bytes (100MB). But in order to support that limit, it may be necessary to set `&lt;Connector <a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html" target="_blank">maxPostSize</a>=104857600"&gt;` in tomcat/conf/server.xml since the default value is only 2097152 bytes (2MB).